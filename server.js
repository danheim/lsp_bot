// node modules
const Telegraf = require('telegraf');
require('dotenv').config();

// helpers
const { logger } = require('./lib/helpers');
const models = require('./models');

const initBot = async () => {
  await models.sequelize.sync();
  await models.sequelize.authenticate();
  console.log(' üöÄüöÄüöÄ üöÄüöÄüöÄ üöÄüöÄüöÄ\n', 'üöÄ Database looks fine');

  const bot = new Telegraf(process.env.BOT_TOKEN);
  bot.use(logger);
  bot.start(ctx => ctx.reply('–ü—Ä–∏–≤–µ—Ç'));

  bot.on('text', async ctx => {
    try {
      const { text } = ctx.message;
      if (text.startsWith('–∞–∫–∫–∞—É–Ω—Ç')) {
        const id = text.split(' ')[1];
        if (!id) return;

        const account = await models.Account.findOne({
          where: { id },
          include: [
            { model: models.Char },
            {
              model: models.Admin,
              attributes: ['rank'],
              as: 'admin'
            },
          ]
        });

        if (!account) {
          return await ctx.reply('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { login, Chars: chars, admin } = account;

        let info = 'ID: ' + id
          + '\n–õ–æ–≥–∏–Ω: ' + login
          + '\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ' + (admin ? `–î–∞ (${admin.rank} —É—Ä–æ–≤–µ–Ω—å)` : '–ù–µ—Ç');

        if (chars.length > 0) info += '\n\n–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:';
        chars.forEach((char, i) => {
          info += `\n${i + 1}. ID: ${char.id}, –ù–∏–∫: ${char.login}`
        });

        if (account) {
          return await ctx.reply(info);
        } else {
          return await ctx.reply('Account not found');
        }
      }

      else if (text.startsWith('–ø–µ—Ä—Å–æ–Ω–∞–∂')) {
        const charId = text.split(' ')[1];
        if (!charId) return;

        const char = await models.Char.findOne({
          where: { id: charId }
        });

        if (!char) return await ctx.reply('–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');

        const { id, login, cash, bankmoney, number } = char;
        let info = 'ID: ' + id
          + '\n–ù–∏–∫: ' + login
          + '\n–ù–∞–ª–∏—á–Ω—ã–µ: ' + cash + '$'
          + '\n–í –±–∞–Ω–∫–µ: ' + bankmoney + '$'
          + '\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + (number === '0' ? '–ù–µ—Ç' : number);

        await ctx.reply(info);
      }

    } catch (e) {
      console.log('Some error happened (on: text)');
      console.log(e.message);–∞
    }
  });

  await bot.launch();
};

initBot().then();
